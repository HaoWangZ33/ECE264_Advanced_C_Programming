#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include "answer03.h"

Maze *Read_maze_from_2Dfile(FILE *);
Maze *Allocate_maze_space(int, int);
void Deallocate_maze_space(Maze *);
int simulate_helper(FILE*, Coord, Coord, Maze*, int);
int Write_maze_to_2Dfile(char *, const Maze *);
int Path_helper(Maze*, Coord, Coord, int, int**);

/* given a maze, given a location cur, is that PATH */
/* if out of bound, return 0                        */
/* if within bound, but not PATH, return 0          */
/* otherwise return 1                               */

static int Is_path(Maze *maze, int row, int col)
{
   if ((row >= 0) && (row < maze->nrow)) {
      if ((col >= 0) && (col < maze->ncol)) {
         return maze->maze_array[row][col] == PATH;
      }
   }
   return 0;
}

/* given a maze, current row (curr),                                     */
/* current column (curc), destination row (drow), destination col (dcol) */
/* current distance from source, determine the where to explore from the */
/* current location                                                      */
/* a recursive function: from the current location, try 'N', 'S', 'E',   */
/* 'W' locations one at a time if the attempt is successful, write the   */
/* direction in the file                                                 */

static int Pathfinder_helper(Maze *maze, int curr, int curc, int endr, int endc,
                            int count, FILE *dfptr)
{
   // you may uncomment this and use the output here to trace the function
   // with sample5.pdf
   // printf("(%d, %d), %d\n", curr, curc, count);
   maze->maze_array[curr][curc] = VISITED;
   if ((curr == endr) && (curc == endc)) { // reach the destination 
      int i;
      for (i = 0; i < count; i++) { // create enough space in file
         fputc(VISITED, dfptr);
      }
      return count;
   }

   int found;
   if (Is_path(maze, curr-1, curc)) {
      found = Pathfinder_helper(maze, curr-1, curc, endr, endc, count+1, dfptr);
      if (found != -1) {
         fseek(dfptr, -1, SEEK_CUR); // go back one position
         fputc('N', dfptr);
         fseek(dfptr, -1, SEEK_CUR); // go back one position
         return found;
      }
   }
   if (Is_path(maze, curr+1, curc)) {
      found = Pathfinder_helper(maze, curr+1, curc, endr, endc, count+1, dfptr);
      if (found != -1) {
         fseek(dfptr, -1, SEEK_CUR); // go back one position
         fputc('S', dfptr);
         fseek(dfptr, -1, SEEK_CUR); // go back one position
         return found;
      }
   }
   if (Is_path(maze, curr, curc+1)) {
      found = Pathfinder_helper(maze, curr, curc+1, endr, endc, count+1, dfptr);
      if (found != -1) {
         fseek(dfptr, -1, SEEK_CUR); // go back one position
         fputc('E', dfptr);
         fseek(dfptr, -1, SEEK_CUR); // go back one position
         return found;
      }
   }
   if (Is_path(maze, curr, curc-1)) {
      found = Pathfinder_helper(maze, curr, curc-1, endr, endc, count+1, dfptr);
      if (found != -1) {
         fseek(dfptr, -1, SEEK_CUR); // go back one position
         fputc('W', dfptr);
         fseek(dfptr, -1, SEEK_CUR); // go back one position
         return found;
      }
   }
   return -1;
}

/* this is a function implemented by the instructor to illustrate           */
/* how to use a recursive function to go from the left-most top entrance to */
/* the right-most bottom exit of a maze.  The function will print the       */
/* directions taken to reach the bottom exit, without visiting a location   */
/* twice.  Note that the recursion may visit a location a few times         */
/* Given three filenames, first one is a given maze, the second one is to   */
/* be written with the directions, the third is the explored maze           */
/* If the maze file does not exist, the function immediately return -1 and  */
/* do nothing else                                                          */
/* the directions are in the form of a series of characters                 */
/* 'N', 'S', 'E', 'W', without spacing (and without the quotes).            */
/* There should be just a single line, without a terminating newline        */
/* character. In other words, to the vi editor, it is an incomplete file    */
/* you are to assume that you start from the top-most, left-most entry      */
/* of the maze.  Therefore, the first direction is always 'S'               */
/* similarly, the last direction is always 'S'                              */
/* the returned value should be the number of steps taken to reach          */
/* the right-most bottom exit.  It is typically not the shortest distance   */
/* Note that the maze can be generated by amaze, or some combinations of    */
/* the maze expansion functions that you have written in PE08               */
/* you may assume that the maze file, if it exists, is in the correct format*/

int Find_path_from_top_entrance_to_bottom_exit(char *mazefile, char *directionfile, char *visitedfile)
{
   FILE *mfptr = fopen(mazefile, "r");
   if (mfptr == NULL) {
      return -1;
   }
   
   /* read the maze from mfptr */

   Maze *maze = Read_maze_from_2Dfile(mfptr);
   fclose(mfptr);
   if (maze == NULL) {
      return -1;
   }
   
   /* find the starting location, the top-most, left-most opening */
   int startr, startc;
   startr = 0;
   for (startc = 0; startc < maze->ncol; startc++) {
      if (maze->maze_array[startr][startc] == PATH) {
         break;
      }
   }

   /* find the ending location, the bottom-most, right most opening */
   int endr, endc;
   endr = maze->nrow-1;
   for (endc = maze->ncol-1; endc >= 0; endc--) {
      if (maze->maze_array[endr][endc] == PATH) {
         break;
      }
   } 

   // no starting location, deallocate and return 
   if (startc == maze->ncol) {
      Deallocate_maze_space(maze);
      return -1;
   }
   // no ending location, deallocate and return 
   if (endc == -1) {
      Deallocate_maze_space(maze);
      return -1;
   }

   FILE *dfptr = fopen(directionfile, "w");
   if (dfptr == NULL) {
      Deallocate_maze_space(maze);
      return -1;
   }
   int steps = Pathfinder_helper(maze, startr, startc, endr, endc, 0, dfptr);
   Write_maze_to_2Dfile(visitedfile, maze);
   fclose(dfptr);
   Deallocate_maze_space(maze);
   return steps;
}


/* The function should write the directions of a shortest path from the  */
/* source location to the destination location into the directions file  */
/* the directions are in the form of a series of characters              */
/* 'N', 'S', 'E', 'W', without spacing (and without the quotes).         */
/* There should be just a single line, without a terminating newline     */
/* character. In other words, to the vi editor, it is an incomplete file */
/* The directions should allow an agent to travel in the maze from the   */
/* source coordinates to the destination coordinates using the fewest    */
/* number of moves                                                       */
/* the number of moves taken by the agent in a shortest path should be   */
/* returned                                                              */
/* Note that the maze can be generated by amaze, or some combinations of */
/* the maze expansion functions that you have written in PE08            */
/* you may assume that the maze file, if it exists, is in the correct    */
/* format                                                                */
int DFS_shortest_path_directions(char *mazefile, char *directionfile,
                        Coord source, Coord destination)
{
   FILE *rfp_maze = fopen(mazefile, "r");
   if (rfp_maze == NULL) {
      return -1;
   }

   Maze* maze = Read_maze_from_2Dfile(rfp_maze);
   fclose(rfp_maze);
   if (maze == NULL){
      return -1;
   }

   if ((source.row < 0) || (source.row > maze->nrow) || (source.col < 0) || (source.col > maze->ncol) || !Is_path(maze, source.row, source.col)) {
      Deallocate_maze_space(maze);
      return -1;
   }
   if ((destination.row < 0) || (destination.row > maze->nrow) || (destination.col < 0) || (destination.col > maze->ncol) || !Is_path(maze, destination.row, destination.col)) {
      Deallocate_maze_space(maze);
      return -1;
   }

   FILE *wfp_direct = fopen(directionfile, "w");
   if (wfp_direct == NULL) {
      Deallocate_maze_space(maze);
      return -1;
   }

   int** steps_count = malloc(sizeof(int*) * maze->nrow);
   if (steps_count == NULL) {
      Deallocate_maze_space(maze);
      return -1;
   }
   int i = 0;
   for (i = 0; i < maze->nrow; i++) {
      steps_count[i] = malloc(sizeof(int) * maze->ncol);
      if (steps_count[i] == NULL) {
         int j = 0;
         for (j = 0; j < i; j++) {
            free(steps_count[j]);
         }
         free(steps_count);
         Deallocate_maze_space(maze);
      }
   }
   int steps = Path_helper(maze, curr, dest, 0, steps_count);





   fclose(wfp_direct);
   for (i = 0; i < maze->nrow; i++) {
      free(steps_count[i]);
   }
   free(steps_count);
   Deallocate_maze_space(maze);
   return steps;
}

int Path_helper(Maze* maze, Coord curr, Coord dest, int count, int** steps_count){
   return 0;
}

int Simulate_movement(char *mazefile, char *directionfile, char *visitedfile,
                      Coord source, Coord destination)
{
   FILE* rfp_maze;
   FILE* rfp_direct;
   Maze* maze;
   int result = 0;
   int word_count;

   rfp_maze = fopen(mazefile, "r");
   if (rfp_maze == NULL) {
      return -1;
   }

   maze = Read_maze_from_2Dfile(rfp_maze);
   fclose(rfp_maze);
   if (maze == NULL){
      return -1;
   }

   rfp_direct = fopen(directionfile, "r");
   if (rfp_direct == NULL) {
      Deallocate_maze_space(maze);
      return -1;
   }

   if ((source.row < 0) || (source.row > maze->nrow) || (source.col < 0) || (source.col > maze->ncol) || !Is_path(maze, source.row, source.col)) {
      Deallocate_maze_space(maze);
      fclose(rfp_direct);
      return -1;
   }
   if ((destination.row < 0) || (destination.row > maze->nrow) || (destination.col < 0) || (destination.col > maze->ncol) || !Is_path(maze, destination.row, destination.col)) {
      Deallocate_maze_space(maze);
      fclose(rfp_direct);
      return -1;
   }

   //maze->maze_array[source.row][source.col] = '.';
   fseek(rfp_direct, 0, SEEK_SET);
   result = simulate_helper(rfp_direct, source, destination, maze, result);

   word_count = Write_maze_to_2Dfile(visitedfile, maze);

   Deallocate_maze_space(maze);
   fclose(rfp_direct);
   return result;
}

int Write_maze_to_2Dfile(char *filename, const Maze *maze)
{
   FILE *wfp;
   int count = 0;
   
   wfp = fopen(filename, "w");
   if (wfp == NULL) {
      fclose(wfp);
      return EXIT_FAILURE;
   }
   
   fseek(wfp, 0, SEEK_SET);

   int i = 0;
   int j = 0;

   for (i = 0; i < maze->nrow; i++){
      for (j = 0; j < maze->ncol; j++){
         fputc(maze->maze_array[i][j], wfp);
         count = count + 1;
      }
      fputc('\n', wfp);
      count = count + 1;
   }

   fclose(wfp);
   return count;
}

int simulate_helper(FILE* fptr, Coord curr, Coord dest, Maze* maze, int count) {
   int ch;
   ch = fgetc(fptr);
   count = count + 1;
   maze->maze_array[curr.row][curr.col] = '.';

   if ((ch == EOF) && (curr.row == dest.row) && (curr.col == dest.col)) {
      return count;
   }
   if ((ch == EOF) && ((curr.row != dest.row) || (curr.col != dest.col))) {
      return -1;
   }
   
   if (ch == 'N') {
      curr.row = curr.row - 1;
      curr.col = curr.col;
      if ((curr.row < 0) || (curr.row > maze->nrow) || (curr.col < 0) || (curr.col > maze->ncol) || (maze->maze_array[curr.row][curr.col] == 'X')) {
         return -1;
      } else {
         return simulate_helper(fptr, curr, dest, maze, count);
      }
   } else if (ch == 'S') {
      curr.row = curr.row + 1;
      curr.col = curr.col;
      if ((curr.row < 0) || (curr.row > maze->nrow) || (curr.col < 0) || (curr.col > maze->ncol) || (maze->maze_array[curr.row][curr.col] == 'X')) {
         return -1;
      } else {
         return simulate_helper(fptr, curr, dest, maze, count);
      }
   } else if (ch == 'W') {
      curr.row = curr.row;
      curr.col = curr.col - 1;
      if ((curr.row < 0) || (curr.row > maze->nrow) || (curr.col < 0) || (curr.col > maze->ncol) || (maze->maze_array[curr.row][curr.col] == 'X')) {
         return -1;
      } else {
         return simulate_helper(fptr, curr, dest, maze, count);
      }
   } else if (ch == 'E') {
      curr.row = curr.row;
      curr.col = curr.col + 1;
      if ((curr.row < 0) || (curr.row > maze->nrow) || (curr.col < 0) || (curr.col > maze->ncol) || (maze->maze_array[curr.row][curr.col] == 'X')) {
         return -1;
      } else {
         return simulate_helper(fptr, curr, dest, maze, count);
      }
   }
   return -1;
}

Maze *Read_maze_from_2Dfile(FILE *fptr)
{
   int ch;
   int nrow = 0;
   int ncol = 0;

   fseek(fptr, 0, SEEK_SET);
   while ((ch = fgetc(fptr)) != '\n'){
      ncol = ncol + 1;
   }
   fseek(fptr, 0, SEEK_SET);
   while ((ch = fgetc(fptr)) != EOF){
      if (ch == '\n') {
         nrow = nrow + 1;
      }
   }

   Maze* maze;
   maze = Allocate_maze_space(nrow, ncol);
   if (maze == NULL){
      return NULL;
   }

   int count_row = 0;
   int count_col = 0;
   fseek(fptr, 0, SEEK_SET);
   while ((ch = fgetc(fptr)) != EOF){
      if (ch == '\n'){
         count_row = count_row + 1;
         count_col = 0;
      } else {
         maze->maze_array[count_row][count_col] = ch;
         count_col = count_col + 1;
      }
   }

   return maze;
}

Maze *Allocate_maze_space(int nrow, int ncol)
{
   Maze *result;
   result = malloc(sizeof(*result));
   if (result == NULL){
      return NULL;}

   result->nrow = nrow;
   result->ncol = ncol;

   result->maze_array = malloc(sizeof(*(result->maze_array)) * nrow);
   if (result->maze_array == NULL){
      free(result);
      return NULL;}

   int i = 0;
   for(i = 0; i < nrow; i++){
      result->maze_array[i] = malloc(sizeof(char) * ncol);
      if (result->maze_array[i] == NULL){
         int fi;
         for(fi = 0; fi < i; fi++){
            free(result->maze_array[fi]);
         }
         free(result->maze_array);
         free(result);
         return NULL;
      }
   }

   return result;
}

void Deallocate_maze_space(Maze *maze)
{
   int i = 0;
   for (i = 0; i < maze->nrow; i++){
      free(maze->maze_array[i]);
   }
   free(maze->maze_array);
   free(maze);
}
